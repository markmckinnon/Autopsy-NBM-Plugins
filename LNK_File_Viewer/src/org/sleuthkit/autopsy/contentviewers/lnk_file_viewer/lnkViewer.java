/*
 * Autopsy Forensic Browser
 *
 * Copyright 2018-2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.sleuthkit.autopsy.contentviewers.lnk_file_viewer;

import java.awt.Component;
import java.util.logging.Level;
import java.sql.Date;
import java.text.SimpleDateFormat;
import org.openide.nodes.Node;
import org.openide.util.lookup.ServiceProvider;
import org.sleuthkit.autopsy.contentviewers.FileViewer;
import org.sleuthkit.autopsy.corecomponentinterfaces.DataContentViewer;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.datamodel.AbstractFile;
import org.sleuthkit.autopsy.coreutils.JLNK;
import org.sleuthkit.autopsy.coreutils.JLnkParser;
import org.sleuthkit.autopsy.coreutils.JLnkParserException;
import org.sleuthkit.datamodel.ReadContentInputStream;
/**
 *
 * A content view for LNK files
 */
@ServiceProvider(service = DataContentViewer.class)
@SuppressWarnings("PMD.SingularField") // UI widgets cause lots of false positives
public class lnkViewer extends javax.swing.JPanel implements DataContentViewer {

    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(FileViewer.class.getName());
    private static final String LNK_FILE_EXTENSION = "lnk"; //base extension for LNK file(s)
    private static final String MODULE_NAME = "LNKViewer"; //NON-NLS
    private AbstractFile absFile;

    /**
     * Creates new form prefetchViewer
     */
    public lnkViewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lnkInfoTextArea = new javax.swing.JTextArea();

        setName("prefetchInfoJPanel"); // NOI18N

        lnkInfoTextArea.setColumns(20);
        lnkInfoTextArea.setRows(5);
        jScrollPane1.setViewportView(lnkInfoTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private String addLnkInfoToTextArea(JLNK lnk) {
        String textAreaData = "";

        textAreaData = textAreaData + "Best Name: " + lnk.getBestName() + "\n";
        textAreaData = textAreaData + "Best Path Name: " + lnk.getBestPath() + "\n";
        textAreaData = textAreaData + "\n";
        if (lnk.isHasUnicodeLocalBaseAndCommonSuffixOffset()) {
            textAreaData = textAreaData + "Local Base Path: " + lnk.getLocalBasePathUnicode() + "\n";       
            textAreaData = textAreaData + "Common Path Suffix: " + lnk.getCommonPathSuffixUnicode() + "\n";
        } else {
            textAreaData = textAreaData + "Local Base Path: " + lnk.getLocalBasePath() + "\n";       
            textAreaData = textAreaData + "Common Path Suffix: " + lnk.getCommonPathSuffix() + "\n";    
        }

        textAreaData = textAreaData + "\n";
        String linkArguments = lnk.getArguments();
        if (linkArguments != null) {
            textAreaData = textAreaData + "Arguments: " + linkArguments + "\n";     
        }
        
        textAreaData = textAreaData + "\n";
        if (lnk.isUnicodeNetAndDeviceName()){
            textAreaData = textAreaData + "Device Name: " + lnk.getDeviceNameUnicode() + "\n";       
            textAreaData = textAreaData + "Net Name: " + lnk.getNetNameUnicode() + "\n";
        } else {
            textAreaData = textAreaData + "Device Name: " + lnk.getDeviceName() + "\n";       
            textAreaData = textAreaData + "Net Name: " + lnk.getNetName() + "\n";
        }
        
        textAreaData = textAreaData + "\n";
        textAreaData = textAreaData + "File Size: " + lnk.getFileSize() + "\n";

        textAreaData = textAreaData + "\n";
        textAreaData = textAreaData + "Net Provider Type: " + lnk.getNetworkProviderType() + "\n";
        textAreaData = textAreaData + "Drive Serial Number: " + lnk.getDriveSerialNumber() + "\n";
        textAreaData = textAreaData + "\n";

        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        long createTime = (lnk.getCrtime() / 10000L) - + 11644473600000L;
        Date createDate = new Date(createTime);
        long modifyTime = (lnk.getMtime() / 10000L) - + 11644473600000L;
        Date modifyDate = new Date(modifyTime);
        long accessTime = (lnk.getCtime() / 10000L) - + 11644473600000L;
        Date accessDate = new Date(accessTime);
        textAreaData = textAreaData + "Create Time: " + sdf.format(createDate) + "\n";
        textAreaData = textAreaData + "Access Time: " + sdf.format(accessDate) + "\n";
        textAreaData = textAreaData + "Modify Time: " + sdf.format(modifyDate) + "\n";
        textAreaData = textAreaData + "\n";        
                
        return textAreaData;
    }
    
    public void setFile(AbstractFile recentFile) {
        
            JLNK lnk;
            JLnkParser lnkParser = new JLnkParser(new ReadContentInputStream(recentFile), (int) recentFile.getSize());
            try {
                lnk = lnkParser.parse();
                String lnkInfo = addLnkInfoToTextArea(lnk);
                lnkInfoTextArea.setText(lnkInfo);
                lnkInfoTextArea.setCaretPosition(0);
            } catch (JLnkParserException e) {
                logger.log(Level.WARNING, "Error lnk parsing the file to get recent files {0}", recentFile); //NON-NLS
            }
    }

    @Override
    public void setNode(Node node) {
        setFile(absFile);
    }

    @Override
    public String getTitle() {
        return "Lnk Viewer";
    }

    @Override
    public String getToolTip() {
        return "Lnk Viewer";
    }

    @Override
    public DataContentViewer createInstance() {
        return new lnkViewer();
    }

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public void resetComponent() {
        lnkInfoTextArea.setText("");
    }

    @Override
    public boolean isSupported(Node node) {
        AbstractFile file = node.getLookup().lookup(AbstractFile.class);
        if (file == null) {
            return false;
        }
        if (file.getSize() == 0) {
            return false;
        }
        
        String fileExtension = file.getNameExtension();

        if (file.getNameExtension().toLowerCase().startsWith(LNK_FILE_EXTENSION)) {
            absFile = file;
            return true;
        }
        
        return false;

    }

    @Override
    public int isPreferred(Node node) {
        return 10;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea lnkInfoTextArea;
    // End of variables declaration//GEN-END:variables
}
